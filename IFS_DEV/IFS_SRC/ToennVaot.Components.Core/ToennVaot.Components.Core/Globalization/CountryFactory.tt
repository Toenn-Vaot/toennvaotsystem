<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>

using System.Globalization;
using ToennVaot.Components.Core.Models.Countries;

namespace ToennVaot.Components.Core.Globalization
{
<#
    // Define the path to your CSV file
    string csvFilePath = @"ToennVaot.Components.Core.Models\data\country-codes.csv";
    
    // Read all lines from the CSV file
    var csvLines = File.ReadLines(csvFilePath); // Skip the header line
    
    var countryFactoryLines = new List<string>();
    var countryIdFactoryLines = new List<string>();

    using (var reader = new StreamReader(csvFilePath))
    {
        var count = 0;
        foreach (var line in csvLines)
        {
            if(count == 0) { count++; continue; };

            // Split each line by comma
            var columns = line.Split(';');
  
            // Extract the necessary values
            var countryCode = columns[2].Trim().Trim('"');
            var isoAlpha2 = columns[9].Trim().Trim('"');
            var isoAlpha3 = columns[2].Trim().Trim('"');
            var isoNumeric = columns[5].Trim();
            var topLevelDomain = columns[49].Trim().Trim('"');

            var regionName = columns[43].Trim();

            var countryName = columns[40].Trim().Trim('"');
            var countryNameCn = columns[39].Trim().Trim('"');
            var countryNameRu = columns[46].Trim().Trim('"');
            var countryNameFr = columns[16].Trim().Trim('"');
            var countryNameEs = columns[37].Trim().Trim('"');
            var countryNameAr = columns[31].Trim().Trim('"');

            // Generate a valid C# class name by removing spaces from the country name
            var className = new CultureInfo("en-US",false).TextInfo.ToTitleCase(countryName.ToLower()).Replace("'", "").Replace("-", "").Replace(" ", "").Split(',')[0].Split('(')[0];

            // Special case
            if(new [] { "MAC", "HKG" }.Contains(isoAlpha3)) {
                className += $"_{isoAlpha3}";
            }
            
            // Generate the country factory line based on the data
            countryFactoryLines.Add($"{{ \"{isoAlpha2.ToUpper()}\", new {className}() }},");
            
            // Generate the country factory line based on the data
            countryIdFactoryLines.Add($"{{ {isoNumeric.ToUpper()}, new {className}() }},");
        }
    }
#>

    ///<summary>
    /// The factory class of <seealso cref="Country"/>
    ///</summary>
    public class CountryFactory {
        private readonly Dictionary<string, Country> _countriesByIsoCode = new(){
<#
    foreach(var countryFactoryLine in countryFactoryLines) {
#>
            <#= countryFactoryLine #>
<#
    }
#>
        };

        private readonly Dictionary<int, Country> _countriesByIsoCodeId = new(){
<#
    foreach(var countryIdFactoryLine in countryIdFactoryLines) {
#>
            <#= countryIdFactoryLine #>
<#
    }
#>
        };

        ///<summary>
        /// Get the Country instance for the requested <paramref name="culture"/>
        ///</summary>
        public Country Get(CultureInfo culture) => _countriesByIsoCode.GetValueOrDefault(culture.TwoLetterISOLanguageName);

        ///<summary>
        /// Get the Country instance for the requested <paramref name="isoCode"/>
        ///</summary>
        public Country Get(int isoCode) => _countriesByIsoCodeId.GetValueOrDefault(isoCode);
    }
}