<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToennVaot.Components.Core</name>
    </assembly>
    <members>
        <member name="T:ToennVaot.Components.Core.Attributes.ApplicationOnly">
            <summary>
            Attribute to indicate the field should be available only for application
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Attributes.SerializeDateOnly">
            <summary>
            Attribute to indicate the field should serialize only the date part of DateTime
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Attributes.UserOnly">
            <summary>
            Attribute to indicate the field should be available only for user
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants">
            <summary>
            The Extensions constants
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants.Languages">
            <summary>
            Languages constants
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Languages.Danish">
            <summary>
            ISO language code for Danish (Denmark)
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Languages.English">
            <summary>
            ISO language code for English (United Kingdom)
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Languages.French">
            <summary>
            ISO language code for French (France)
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants.Countries">
            <summary>
            Countries constants
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Countries.Denmark">
            <summary>
            Denmark country
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Countries.France">
            <summary>
            Denmark country
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants.Security">
            <summary>
            Security constants
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants.Security.ClaimType">
            <summary>
            Authentication claim constants
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Security.ClaimType.GrantType">
            <summary>
            The grant type claim name
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Security.ClaimType.CustomerId">
            <summary>
            The client identifier claim type
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Constants.Security.RequestHeader">
            <summary>
            Request header constants
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Constants.Security.RequestHeader.ViewAs">
            <summary>
            Header string name to specify the request should be impersonate
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Managers.IStateManager`2">
            <summary>
                The state manager interface
            </summary>
            <typeparam name="T">The enumeration type of state to manage</typeparam>
            <typeparam name="TU">The type of object holds the state</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Managers.IStateManager`2.InitState(`0)">
            <summary>
                Method to init the state of <paramref name="component"/>
            </summary>
            <param name="component">The component to manage</param>
        </member>
        <member name="M:ToennVaot.Components.Core.Managers.IStateManager`2.ResetState(`0)">
            <summary>
                Method to reset the state of <paramref name="component"/>
            </summary>
            <param name="component">The component to manage</param>
        </member>
        <member name="M:ToennVaot.Components.Core.Managers.IStateManager`2.ChangeState(`0,`1)">
            <summary>
                Method to change the current state to the <paramref name="newState" /> of the <paramref name="component" />
            </summary>
            <param name="component">The component to manage</param>
            <param name="newState">The new state to set</param>
            <exception cref="T:ToennVaot.Components.Core.Exceptions.StateOverflowException">
                Exception triggers when <paramref name="newState" /> is out of the authorized
                flow
            </exception>
        </member>
        <member name="T:ToennVaot.Components.Core.Stores.StoreBase`2">
            <summary>
            The store base class
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Stores.StoreBase`2.Options">
            <summary>
            The base options to configure store
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Stores.StoreBase`2.Logger">
            <summary>
            The base logger
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreBase`2.#ctor(Microsoft.Extensions.Options.IOptions{ToennVaot.Components.Core.Stores.StoreBaseOptions},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="options">The store base options instance</param>
            <param name="logger">The logger instance</param>
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreBase`2.GetConnection">
            <inheritdoc />
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreBase`2.GetConnectionWithTransaction">
            <inheritdoc />
        </member>
        <member name="T:ToennVaot.Components.Core.Stores.StoreBaseOptions">
            <summary>
            The store base options
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Stores.StoreBaseOptions.ConnectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Stores.StoreEventId">
            <summary>
            The store event identifiers class
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreEventId.ItemNotExistsEventId``1(System.String)">
            <summary>
            Event identifier when item not exists
            </summary>
            <typeparam name="T">The type of item</typeparam>
            <param name="message">The event message</param>
            <returns>The event identifier</returns>
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreEventId.ItemNotExistsToUpdateEventId``1(System.String)">
            <summary>
            Event identifier when item not exists to update
            </summary>
            <typeparam name="T">The type of item</typeparam>
            <param name="message">The event message</param>
            <returns>The event identifier</returns>
        </member>
        <member name="M:ToennVaot.Components.Core.Stores.StoreEventId.ItemNotExistsToDeleteEventId``1(System.String)">
            <summary>
            Event identifier when item not exists to delete
            </summary>
            <typeparam name="T">The type of item</typeparam>
            <param name="message">The event message</param>
            <returns>The event identifier</returns>
        </member>
    </members>
</doc>
