<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToennVaot.Components.Core.Exceptions</name>
    </assembly>
    <members>
        <member name="T:ToennVaot.Components.Core.Exceptions.BaseComponentException">
            <summary>
            This class describes the base component exception.
            This class should be used as base for all components of sub-system
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Exceptions.BaseComponentException.Component">
            <summary>
            The linked component
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Exceptions.BaseComponentException.ExceptionCode">
            <summary>
            The exception code value
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseComponentException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseComponentException.#ctor(System.Enum,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseComponentException.#ctor(System.Enum,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseComponentException.ToString">
            <inheritdoc />
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.BaseCoreException">
            <summary>
            This class describes the base CORE exception.
            This class should be used as base for CORE component exceptions
            </summary>
        </member>
        <member name="P:ToennVaot.Components.Core.Exceptions.BaseCoreException.Component">
            <inheritdoc />
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseCoreException.#ctor(System.Enum,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.BaseCoreException.#ctor(System.Enum,System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum">
            <summary>
            This enumeration lists all available components of the sub-system
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Ticketing">
            <summary>
            Ticketing Management (Farm + TicketProcessing)
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Core">
            <summary>
            Core
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Bim">
            <summary>
            Business Intelligence Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Cmm">
            <summary>
            Customer Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Dcm">
            <summary>
            Document Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Jmm">
            <summary>
            Job Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Omm">
            <summary>
            Order Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Pmm">
            <summary>
            Package Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Rmm">
            <summary>
            Reference Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Tcm">
            <summary>
            Travel Card Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Tvs">
            <summary>
            Transverse Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.Acm">
            <summary>
            Authentication Management
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.ComponentSubSystemEnum.RestApi">
            <summary>
            REST Api Management
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum">
            <summary>
            This enumeration lists all available exceptions in CORE component
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.StateOverflowException">
            <summary>
            StateOverflowException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordDeletionForbiddenException">
            <summary>
            RecordDeletionForbiddenException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordCreationForbiddenException">
            <summary>
            RecordCreationForbiddenException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordAlreadyExistsException">
            <summary>
            RecordAlreadyExistsException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordNotExistsException">
            <summary>
            RecordNotExistsException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordNotValidException">
            <summary>
            RecordNotValidException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.RecordUpdateForbiddenException">
            <summary>
            RecordUpdateForbiddenException
            </summary>
        </member>
        <member name="F:ToennVaot.Components.Core.Exceptions.CoreExceptionCodeEnum.MissingPropertyValueException">
            <summary>
            MissingPropertyValueException
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordAlreadyExistsException`1">
            <summary>
            Exception triggers when the record already exists
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordAlreadyExistsException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordChangeStateForbiddenException`1">
            <summary>
            Exception triggers when the change of state of record is forbidden
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordChangeStateForbiddenException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordCreationForbiddenException`1">
            <summary>
            Exception triggers when the creation of record is forbidden
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordCreationForbiddenException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordDeletionForbiddenException`1">
            <summary>
            Exception triggers when the deletion of record is forbidden
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordDeletionForbiddenException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordNotExistsException`1">
            <summary>
            Exception triggers when the record does not exists
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordNotExistsException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordNotValidException`1">
            <summary>
            Exception triggers when the record is not valid
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordNotValidException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Data.RecordUpdateForbiddenException`1">
            <summary>
            Exception triggers when the update of record is forbidden
            </summary>
            <typeparam name="T">The record type</typeparam>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Data.RecordUpdateForbiddenException`1.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.MissingPropertyValueException">
            <summary>
            Exception triggered when property value is missing
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.MissingPropertyValueException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.MissingPropertyValueException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Security.NotEnoughRightsAccessException">
            <summary>
            Exception triggers when the user try to access with insufficient rights
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Security.NotEnoughRightsAccessException.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.Security.NotEnoughRightsOperationException">
            <summary>
            Exception triggers when the call to the operation is done with insufficient rights
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.Security.NotEnoughRightsOperationException.#ctor(System.Enum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ToennVaot.Components.Core.Exceptions.StateOverflowException">
            <summary>
            Exception triggered when state is over the configured flow
            </summary>
        </member>
        <member name="M:ToennVaot.Components.Core.Exceptions.StateOverflowException.#ctor(System.Enum,System.Enum)">
            <summary>
            Constructor
            </summary>
            <param name="currentState">The current state</param>
            <param name="newState">The new desired state</param>
        </member>
    </members>
</doc>
